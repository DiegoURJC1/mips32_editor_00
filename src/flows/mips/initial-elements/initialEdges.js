import {Algorithm} from "../../../edges/EditableEdge/constants.ts";
import { v4 as uuidv4 } from 'uuid';

export const initialEdges = [
    {
        id: 'control->and',
        type: 'editable-edge',
        source: 'control',
        target: 'and',
        sourceHandle: 'pc-write-cond-output',
        targetHandle: 'input2',
        animated: false,
        data: {
            algorithm: Algorithm.Linear,
            points: [
                {
                    x: 1000,
                    y: 500,
                    id: uuidv4(),
                    active: true,
                },
            ],
        },
    },
    {
        id: 'control->or',
        type: 'editable-edge',
        source: 'control',
        target: 'or',
        sourceHandle: 'pc-write-output',
        targetHandle: 'input2',
        animated: false,
        data: {
            label: 1,
            algorithm: Algorithm.Linear,
            points: [
                { x: 990, y: 520, id: uuidv4(), active: true },
                { x: 730, y: 520, id: uuidv4(), active: true },
                { x: 730, y: 510, id: uuidv4(), active: true },
            ],
        },
    },
    {
        id: 'control->multiplexer1',
        type: 'editable-edge',
        source: 'control',
        target: 'multiplexer1',
        sourceHandle: 'i-or-d-output',
        targetHandle: 'control-input-multiplexer1',
        animated: false,
        data: {
            label: 1,
            algorithm: Algorithm.Linear,
            points: [
                { x: 990, y: 560, id: uuidv4(), active: true },
                { x: 530, y: 560, id: uuidv4(), active: true },
            ],
        },
    },
    {
        id: 'control->memory1',
        type: 'editable-edge',
        source: 'control',
        target: 'memory',
        sourceHandle: 'mem-read-output',
        targetHandle: 'control-read-input-memory',
        animated: false,
        data: {
            label: 1,
            algorithm: Algorithm.Linear,
            points: [
                { x: 990, y: 600, id: uuidv4(), active: true },
                { x: 660, y: 600, id: uuidv4(), active: true },
            ],
        },
    },
    {
        id: 'control->memory2',
        type: 'editable-edge',
        source: 'control',
        target: 'memory',
        sourceHandle: 'mem-write-output',
        targetHandle: 'control-write-input-memory',
        animated: false,
        data: {
            label: 1,
            algorithm: Algorithm.Linear,
            points: [
                { x: 990, y: 640, id: uuidv4(), active: true },
                { x: 720, y: 640, id: uuidv4(), active: true },
            ],
        },
    },
    {
        id: 'control->multiplexer3',
        type: 'editable-edge',
        source: 'control',
        target: 'multiplexer3',
        sourceHandle: 'mem-to-reg-output',
        targetHandle: 'control-input-multiplexer3',
        animated: false,
        data: {
            label: 1,
            algorithm: Algorithm.Linear,
            points: [
                { x: 990, y: 680, id: uuidv4(), active: true },
                { x: 780, y: 680, id: uuidv4(), active: true },
                { x: 780, y: 1050, id: uuidv4(), active: true },
                { x: 1080, y: 1050, id: uuidv4(), active: true },
            ],
        },
    },
    {
        id: 'control->instruction-register',
        type: 'editable-edge',
        source: 'control',
        target: 'instructionRegister',
        sourceHandle: 'i-r-write-output',
        targetHandle: 'control-input-instructionRegister',
        animated: false,
        data: {
            label: 1,
            algorithm: Algorithm.Linear,
            points: [
                { x: 990, y: 720, id: uuidv4(), active: true },
                { x: 860, y: 720, id: uuidv4(), active: true },
            ],
        },
    },

    {
        id: 'control->multiplexer6',
        type: 'editable-edge',
        source: 'control',
        target: 'multiplexer6',
        sourceHandle: 'pc-source-output',
        targetHandle: 'control-input-multiplexer6',
        animated: false,
        data: {
            label: 1,
            algorithm: Algorithm.Linear,
            points: [
                { x: 1150, y: 490, id: uuidv4(), active: true },
                { x: 2080, y: 490, id: uuidv4(), active: true },
            ],
        },
    },
    {
        id: 'control->aluControl',
        type: 'editable-edge',
        source: 'control',
        target: 'aluControl',
        sourceHandle: 'alu-op-output',
        targetHandle: 'control-input-aluControl',
        animated: false,
        data: {
            label: 1,
            algorithm: Algorithm.Linear,
            points: [
                { x: 1160, y: 530, id: uuidv4(), active: true },
                { x: 1690, y: 530, id: uuidv4(), active: true },
                { x: 1690, y: 1320, id: uuidv4(), active: true },
                {x: 1640, y: 1320, id: uuidv4(), active: true },
            ],
        },
    },
    {
        id: 'control->multiplexer5',
        type: 'editable-edge',
        source: 'control',
        target: 'multiplexer5',
        sourceHandle: 'alu-src-b-output',
        targetHandle: 'control-input-multiplexer5',
        animated: false,
        data: {
            label: 1,
            algorithm: Algorithm.Linear,
            points: [
                { x: 1180, y: 570, id: uuidv4(), active: true },
                { x: 1630, y: 570, id: uuidv4(), active: true },
                { x: 1630, y: 940, id: uuidv4(), active: true },
                { x: 1580, y: 940, id: uuidv4(), active: true },

            ],
        },
    },
    {
        id: 'control->multiplexer4',
        type: 'editable-edge',
        source: 'control',
        target: 'multiplexer4',
        sourceHandle: 'alu-src-a-output',
        targetHandle: 'control-input-multiplexer4',
        animated: false,
        data: {
            label: 1,
            algorithm: Algorithm.Linear,
            points: [
                { x: 1180, y: 620, id: uuidv4(), active: true },
                { x: 1580, y: 620, id: uuidv4(), active: true },
            ],
        },
    },
    {
        id: 'control->register',
        type: 'editable-edge',
        source: 'control',
        target: 'register',
        sourceHandle: 'reg-write-output',
        targetHandle: 'control-input-register',
        animated: false,
        data: {
            label: 1,
            algorithm: Algorithm.Linear,
            points: [
                { x: 1180, y: 670, id: uuidv4(), active: true },
                { x: 1250, y: 670, id: uuidv4(), active: true },
            ],
        },
    },
    {
        id: 'control->multiplexer2',
        type: 'editable-edge',
        source: 'control',
        target: 'multiplexer2',
        sourceHandle: 'reg-dst-output',
        targetHandle: 'control-input-multiplexer2',
        animated: false,
        data: {
            label: 1,
            algorithm: Algorithm.Linear,
            points: [
                { x: 1150, y: 720, id: uuidv4(), active: true },
                { x: 1150, y: 840, id: uuidv4(), active: true },
                { x: 1080, y: 840, id: uuidv4(), active: true },
            ],
        },
    },



    {
        id: 'and->or',
        type: 'editable-edge',
        source: 'and',
        target: 'or',
        sourceHandle: 'output',
        targetHandle: 'input1',
        animated: false,
        data: {
            algorithm: Algorithm.Linear,
            points: [],
        },
    },
    {
        id: 'or->pc',
        type: 'editable-edge',
        source: 'or',
        target: 'pc',
        sourceHandle: 'output',
        targetHandle: 'control-input-pc',
        animated: false,
        data: {
            algorithm: Algorithm.Linear,
            points: [
                { x: 420, y: 500, id: uuidv4(), active: true },
            ],
        },
    },
    {
        id: 'pc->multiplexer1',
        type: 'editable-edge',
        source: 'pc',
        target: 'multiplexer1',
        sourceHandle: 'output-pc',
        targetHandle: '0-multiplexer1',
        animated: false,
        data: {
            algorithm: Algorithm.Linear,
            points: [],
        },
    },
    {
        id: 'pc->multiplexer4',
        type: 'editable-edge',
        source: 'pc',
        target: 'multiplexer4',
        sourceHandle: 'output-pc',
        targetHandle: '0-multiplexer4',
        animated: false,
        data: {
            algorithm: Algorithm.Linear,
            points: [
                { x: 470, y: 840, id: uuidv4(), active: true },
                { x: 470, y: 750, id: uuidv4(), active: true },
                { x: 1520, y: 750, id: uuidv4(), active: true },
                { x: 1520, y: 840, id: uuidv4(), active: true },
            ],
        },
    },
    {
        id: 'pc->multiplexer6',
        type: 'editable-edge',
        source: 'pc',
        target: 'multiplexer6',
        sourceHandle: 'output-pc',
        targetHandle: '2-multiplexer6',
        animated: false,
        data: {
            algorithm: Algorithm.Linear,
            points: [
                { x: 470, y: 840, id: uuidv4(), active: true },
                { x: 470, y: 750, id: uuidv4(), active: true },
                { x: 1520, y: 750, id: uuidv4(), active: true },
                { x: 2030, y: 750, id: uuidv4(), active: true },
                { x: 2030, y: 620, id: uuidv4(), active: true },
            ],
        },
    },
    {
        id: 'multiplexer1->memory',
        type: 'editable-edge',
        source: 'multiplexer1',
        target: 'memory',
        sourceHandle: 'output-multiplexer1',
        targetHandle: 'direction-input-memory',
        animated: false,
        data: {
            algorithm: Algorithm.Linear,
            points: [],
        },
    },
    {
        id: 'memory->instructionRegister',
        type: 'editable-edge',
        source: 'memory',
        target: 'instructionRegister',
        sourceHandle: 'output-memory',
        targetHandle: 'input-instructionRegister',
        animated: false,
        data: {
            algorithm: Algorithm.Linear,
            points: [],
        },
    },
    {
        id: 'memory->memoryDataRegister',
        type: 'editable-edge',
        source: 'memory',
        target: 'memoryDataRegister',
        sourceHandle: 'output-memory',
        targetHandle: 'input-memoryDataRegister',
        animated: false,
        data: {
            algorithm: Algorithm.Linear,
            points: [
                { x: 770, y: 900, id: uuidv4(), active: true },
                { x: 770, y: 1190, id: uuidv4(), active: true },
            ],
        },
    },
    {
        id: 'instructionRegister->control',
        type: 'editable-edge',
        source: 'instructionRegister',
        target: 'control',
        sourceHandle: 'output-[31-26]-instructionRegister',
        targetHandle: 'input',
        animated: false,
        data: {
            algorithm: Algorithm.Linear,
            points: [
                { x: 1080, y: 800, id: uuidv4(), active: true },
            ],
        },
    },
    {
        id: 'instructionRegister->register_1',
        type: 'editable-edge',
        source: 'instructionRegister',
        target: 'register',
        sourceHandle: 'output-[25-21]-instructionRegister',
        targetHandle: 'read-reg-1-input-register',
        animated: false,
        data: {
            algorithm: Algorithm.Linear,
            points: [
            ],
        },
    },
    {
        id: 'instructionRegister->shiftLeftInstructionRegister_1',
        type: 'editable-edge',
        source: 'instructionRegister',
        target: 'shiftLeftInstructionRegister',
        sourceHandle: 'output-[25-21]-instructionRegister',
        targetHandle: 'input-shiftLeft2',
        animated: false,
        data: {
            algorithm: Algorithm.Linear,
            points: [
                { x: 1000, y: 850, id: uuidv4(), active: true },
                { x: 1000, y: 810, id: uuidv4(), active: true },
                { x: 1090, y: 810, id: uuidv4(), active: true },
                { x: 1090, y: 760, id: uuidv4(), active: true },
                { x: 1490, y: 760, id: uuidv4(), active: true },
                { x: 1490, y: 650, id: uuidv4(), active: true },
            ],
        },
    },
    {
        id: 'instructionRegister->shiftLeftInstructionRegister_2',
        type: 'editable-edge',
        source: 'instructionRegister',
        target: 'shiftLeftInstructionRegister',
        sourceHandle: 'output-[20-16]-instructionRegister',
        targetHandle: 'input-shiftLeft2',
        animated: false,
        data: {
            algorithm: Algorithm.Linear,
            points: [
                { x: 1000, y: 910, id: uuidv4(), active: true },
                { x: 1000, y: 860, id: uuidv4(), active: true },
                { x: 1060, y: 860, id: uuidv4(), active: true },
                { x: 1060, y: 810, id: uuidv4(), active: true },
                { x: 1090, y: 810, id: uuidv4(), active: true },
                { x: 1090, y: 760, id: uuidv4(), active: true },
                { x: 1490, y: 760, id: uuidv4(), active: true },
                { x: 1490, y: 650, id: uuidv4(), active: true },
            ],
        },
    },
    {
        id: 'instructionRegister->shiftLeftInstructionRegister_3',
        type: 'editable-edge',
        source: 'instructionRegister',
        target: 'shiftLeftInstructionRegister',
        sourceHandle: 'output-[15-0]-instructionRegister',
        targetHandle: 'input-shiftLeft2',
        animated: false,
        data: {
            algorithm: Algorithm.Linear,
            points: [
                { x: 980, y: 960, id: uuidv4(), active: true },
                { x: 980, y: 910, id: uuidv4(), active: true },
                { x: 980, y: 860, id: uuidv4(), active: true },
                { x: 1060, y: 860, id: uuidv4(), active: true },
                { x: 1060, y: 810, id: uuidv4(), active: true },
                { x: 1090, y: 810, id: uuidv4(), active: true },
                { x: 1090, y: 760, id: uuidv4(), active: true },
                { x: 1490, y: 760, id: uuidv4(), active: true },
                { x: 1490, y: 650, id: uuidv4(), active: true },
            ],
        },
    },
    {
        id: 'shiftLeftInstructionRegister->multiplexer6',
        type: 'editable-edge',
        source: 'shiftLeftInstructionRegister',
        target: 'multiplexer6',
        sourceHandle: 'output-shiftLeft2',
        targetHandle: '2-multiplexer6',
        animated: false,
        data: {
            algorithm: Algorithm.Linear,
            points: [
                { x: 2030, y: 650, id: uuidv4(), active: true },
                { x: 2030, y: 620, id: uuidv4(), active: true },
            ],
        },
    },
    {
        id: 'instructionRegister->register_2',
        type: 'editable-edge',
        source: 'instructionRegister',
        target: 'register',
        sourceHandle: 'output-[20-16]-instructionRegister',
        targetHandle: 'read-reg-2-input-register',
        animated: false,
        data: {
            algorithm: Algorithm.Linear,
            points: [
                { x: 1000, y: 910, id: uuidv4(), active: true },
                { x: 1000, y: 900, id: uuidv4(), active: true },
            ],
        },
    },

    {
        id: 'instructionRegister->multiplexer2_1',
        type: 'editable-edge',
        source: 'instructionRegister',
        target: 'multiplexer2',
        sourceHandle: 'output-[20-16]-instructionRegister',
        targetHandle: '0-multiplexer2',
        animated: false,
        data: {
            algorithm: Algorithm.Linear,
            points: [
                { x: 1000, y: 910, id: uuidv4(), active: true },
                { x: 1000, y: 960, id: uuidv4(), active: true },
            ],
        },
    },
    {
        id: 'instructionRegister->multiplexer2_2',
        type: 'editable-edge',
        source: 'instructionRegister',
        target: 'multiplexer2',
        sourceHandle: 'output-[15-0]-instructionRegister',
        targetHandle: '1-multiplexer2',
        animated: false,
        data: {
            algorithm: Algorithm.Linear,
            points: [
                { x: 980, y: 960, id: uuidv4(), active: true },
                { x: 980, y: 1000, id: uuidv4(), active: true },
            ],
        },
    },
    {
        id: 'instructionRegister->signExtend',
        type: 'editable-edge',
        source: 'instructionRegister',
        target: 'signExtend',
        sourceHandle: 'output-[15-0]-instructionRegister',
        targetHandle: 'input-signExtend',
        animated: false,
        data: {
            algorithm: Algorithm.Linear,
            points: [
                { x: 980, y: 960, id: uuidv4(), active: true },
                { x: 980, y: 1250, id: uuidv4(), active: true },
            ],
        },
    },
    {
        id: 'instructionRegister->aluControl',
        type: 'editable-edge',
        source: 'instructionRegister',
        target: 'aluControl',
        sourceHandle: 'output-[15-0]-instructionRegister',
        targetHandle: 'input-aluControl',
        animated: false,
        data: {
            algorithm: Algorithm.Linear,
            points: [
                { x: 980, y: 960, id: uuidv4(), active: true },
                { x: 980, y: 1310, id: uuidv4(), active: true },
                { x: 1570, y: 1310, id: uuidv4(), active: true },
                { x: 1570, y: 1250, id: uuidv4(), active: true },
            ],
        },
    },
    {
        id: 'multiplexer2->register',
        type: 'editable-edge',
        source: 'multiplexer2',
        target: 'register',
        sourceHandle: 'output-multiplexer2',
        targetHandle: 'write-reg-input-register',
        animated: false,
        data: {
            algorithm: Algorithm.Linear,
            points: [
                { x: 1120, y: 980, id: uuidv4(), active: true },
                { x: 1120, y: 940, id: uuidv4(), active: true },
            ],
        },
    },
    {
        id: 'multiplexer3->register',
        type: 'editable-edge',
        source: 'multiplexer3',
        target: 'register',
        sourceHandle: 'output-multiplexer3',
        targetHandle: 'data-input-register',
        animated: false,
        data: {
            algorithm: Algorithm.Linear,
            points: [
                { x: 1140, y: 1130, id: uuidv4(), active: true },
                { x: 1140, y: 990, id: uuidv4(), active: true },
            ],
        },
    },
    {
        id: 'register->letter_A',
        type: 'editable-edge',
        source: 'register',
        target: 'letterA',
        sourceHandle: 'read-data-1-output-register',
        targetHandle: 'input-letter',
        animated: false,
        data: {
            algorithm: Algorithm.Linear,
            points: [],
        },
    },
    {
        id: 'register->letter_B',
        type: 'editable-edge',
        source: 'register',
        target: 'letterB',
        sourceHandle: 'read-data-2-output-register',
        targetHandle: 'input-letter',
        animated: false,
        data: {
            algorithm: Algorithm.Linear,
            points: [],
        },
    },
    {
        id: 'letter_B->memory',
        type: 'editable-edge',
        source: 'letterB',
        target: 'memory',
        sourceHandle: 'output-letter',
        targetHandle: 'data-input-memory',
        animated: false,
        data: {
            algorithm: Algorithm.Linear,
            points: [
                { x: 1520, y: 960, id: uuidv4(), active: true },
                { x: 1520, y: 1330, id: uuidv4(), active: true },
                { x: 610, y: 1330, id: uuidv4(), active: true },
                { x: 610, y: 940, id: uuidv4(), active: true },
            ],
        },
    },
    {
        id: 'signExtend->shiftLeftSignExtend',
        type: 'editable-edge',
        source: 'signExtend',
        target: 'shiftLeftSignExtend',
        sourceHandle: 'output-signExtend',
        targetHandle: 'input-shiftLeft2',
        animated: false,
        data: {
            algorithm: Algorithm.Linear,
            points: [],
        },
    },
    {
        id: 'memoryDataRegister->multiplexer3',
        type: 'editable-edge',
        source: 'memoryDataRegister',
        target: 'multiplexer3',
        sourceHandle: 'output-memoryDataRegister',
        targetHandle: '1-multiplexer3',
        animated: false,
        data: {
            algorithm: Algorithm.Linear,
            points: [
                { x: 940, y: 1190, id: uuidv4(), active: true },
                { x: 940, y: 1150, id: uuidv4(), active: true },
            ],
        },
    },
    {
        id: 'letter_A->multiplexer4',
        type: 'editable-edge',
        source: 'letterA',
        target: 'multiplexer4',
        sourceHandle: 'output-letter',
        targetHandle: '1-multiplexer4',
        animated: false,
        data: {
            algorithm: Algorithm.Linear,
            points: [],
        },
    },
    {
        id: 'letter_B->multiplexer5',
        type: 'editable-edge',
        source: 'letterB',
        target: 'multiplexer5',
        sourceHandle: 'output-letter',
        targetHandle: '0-multiplexer5',
        animated: false,
        data: {
            algorithm: Algorithm.Linear,
            points: [
                { x: 1530, y: 960, id: uuidv4(), active: true },
                { x: 1530, y: 990, id: uuidv4(), active: true },
            ],
        },
    },
    {
        id: 'signExtend->multiplexer5',
        type: 'editable-edge',
        source: 'signExtend',
        target: 'multiplexer5',
        sourceHandle: 'output-signExtend',
        targetHandle: '2-multiplexer5',
        animated: false,
        data: {
            algorithm: Algorithm.Linear,
            points: [
                { x: 1330, y: 1250, id: uuidv4(), active: true },
                { x: 1330, y: 1070, id: uuidv4(), active: true },
            ],
        },
    },
    {
        id: 'shiftLeftSignExtend->multiplexer5',
        type: 'editable-edge',
        source: 'shiftLeftSignExtend',
        target: 'multiplexer5',
        sourceHandle: 'output-shiftLeft2',
        targetHandle: '3-multiplexer5',
        animated: false,
        data: {
            algorithm: Algorithm.Linear,
            points: [
                { x: 1500, y: 1250, id: uuidv4(), active: true },
                { x: 1500, y: 1110, id: uuidv4(), active: true },
            ],
        },
    },
    {
        id: 'number1->multiplexer5',
        type: 'editable-edge',
        source: 'number1',
        target: 'multiplexer5',
        sourceHandle: 'output-number',
        targetHandle: '1-multiplexer5',
        animated: false,
        data: {
            algorithm: Algorithm.Linear,
            points: [

            ],
        },
    },
    {
        id: 'multiplexer4->alu',
        type: 'editable-edge',
        source: 'multiplexer4',
        target: 'alu',
        sourceHandle: 'output-multiplexer4',
        targetHandle: 'input1-alu',
        animated: false,
        data: {
            algorithm: Algorithm.Linear,
            points: [
                { x: 1650, y: 860, id: uuidv4(), active: true },
                { x: 1650, y: 950, id: uuidv4(), active: true },
            ],
        },
    },
    {
        id: 'multiplexer5->alu',
        type: 'editable-edge',
        source: 'multiplexer5',
        target: 'alu',
        sourceHandle: 'output-multiplexer5',
        targetHandle: 'input2-alu',
        animated: false,
        data: {
            algorithm: Algorithm.Linear,
            points: [
                { x: 1650, y: 1050, id: uuidv4(), active: true },
                { x: 1650, y: 1010, id: uuidv4(), active: true },
            ],
        },
    },
    {
        id: 'aluControl->alu',
        type: 'editable-edge',
        source: 'aluControl',
        target: 'alu',
        sourceHandle: 'output-aluControl',
        targetHandle: 'alu-operation-input-alu',
        animated: false,
        data: {
            algorithm: Algorithm.Linear,
            points: [
                { x: 1770, y: 1250, id: uuidv4(), active: true },
            ],
        },
    },
    {
        id: 'alu->and',
        type: 'editable-edge',
        source: 'alu',
        target: 'and',
        sourceHandle: 'zero-output-alu',
        targetHandle: 'input1',
        animated: false,
        data: {
            algorithm: Algorithm.Linear,
            points: [
                { x: 1860, y: 950, id: uuidv4(), active: true },
                { x: 1860, y: 480, id: uuidv4(), active: true },
            ],
        },
    },
    {
        id: 'alu->aluExit',
        type: 'editable-edge',
        source: 'alu',
        target: 'aluExit',
        sourceHandle: 'result-output-alu',
        targetHandle: 'input-aluExit',
        animated: false,
        data: {
            algorithm: Algorithm.Linear,
            points: [],
        },
    },
    {
        id: 'alu->multiplexer6',
        type: 'editable-edge',
        source: 'alu',
        target: 'multiplexer6',
        sourceHandle: 'result-output-alu',
        targetHandle: '0-multiplexer6',
        animated: false,
        data: {
            algorithm: Algorithm.Linear,
            points: [
                { x: 1880, y: 1010, id: uuidv4(), active: true },
                { x: 1880, y: 540, id: uuidv4(), active: true },
            ],
        },
    },
    {
        id: 'aluExit->multiplexer6',
        type: 'editable-edge',
        source: 'aluExit',
        target: 'multiplexer6',
        sourceHandle: 'output-aluExit',
        targetHandle: '1-multiplexer6',
        animated: false,
        data: {
            algorithm: Algorithm.Linear,
            points: [
                { x: 1980, y: 1010, id: uuidv4(), active: true },
                { x: 1980, y: 580, id: uuidv4(), active: true },
            ],
        },
    },
    {
        id: 'aluExit->multiplexer3',
        type: 'editable-edge',
        source: 'aluExit',
        target: 'multiplexer3',
        sourceHandle: 'output-aluExit',
        targetHandle: '0-multiplexer3',
        animated: false,
        data: {
            algorithm: Algorithm.Linear,
            points: [
                { x: 1980, y: 1010, id: uuidv4(), active: true },
                { x: 1980, y: 1340, id: uuidv4(), active: true },
                { x: 1020, y: 1340, id: uuidv4(), active: true },
                { x: 1020, y: 1110, id: uuidv4(), active: true },
            ],
        },
    },
    {
        id: 'aluExit->multiplexer1',
        type: 'editable-edge',
        source: 'aluExit',
        target: 'multiplexer1',
        sourceHandle: 'output-aluExit',
        targetHandle: '1-multiplexer1',
        animated: false,
        data: {
            algorithm: Algorithm.Linear,
            points: [
                { x: 1980, y: 1010, id: uuidv4(), active: true },
                { x: 1980, y: 1340, id: uuidv4(), active: true },
                { x: 470, y: 1340, id: uuidv4(), active: true },
                { x: 470, y: 880, id: uuidv4(), active: true },
            ],
        },
    },
    {
        id: 'multiplexer6->pc',
        type: 'editable-edge',
        source: 'multiplexer6',
        target: 'pc',
        sourceHandle: 'output-multiplexer6',
        targetHandle: 'input-pc',
        animated: false,
        data: {
            algorithm: Algorithm.Linear,
            points: [
                { x: 2130, y: 580, id: uuidv4(), active: true },
                { x: 2130, y: 460, id: uuidv4(), active: true },
                { x: 380, y: 460, id: uuidv4(), active: true },
                { x: 380, y: 840, id: uuidv4(), active: true },
            ],
        },
    },
]